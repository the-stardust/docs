// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: proto/tencent_cloud.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	TencentCloud_CreateRecTask_FullMethodName = "/TencentCloud/CreateRecTask"
)

// TencentCloudClient is the client API for TencentCloud service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TencentCloudClient interface {
	CreateRecTask(ctx context.Context, in *TencentCloudCreateRecRequest, opts ...grpc.CallOption) (*TencentCloudResponse, error)
}

type tencentCloudClient struct {
	cc grpc.ClientConnInterface
}

func NewTencentCloudClient(cc grpc.ClientConnInterface) TencentCloudClient {
	return &tencentCloudClient{cc}
}

func (c *tencentCloudClient) CreateRecTask(ctx context.Context, in *TencentCloudCreateRecRequest, opts ...grpc.CallOption) (*TencentCloudResponse, error) {
	out := new(TencentCloudResponse)
	err := c.cc.Invoke(ctx, TencentCloud_CreateRecTask_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TencentCloudServer is the server API for TencentCloud service.
// All implementations must embed UnimplementedTencentCloudServer
// for forward compatibility
type TencentCloudServer interface {
	CreateRecTask(context.Context, *TencentCloudCreateRecRequest) (*TencentCloudResponse, error)
	mustEmbedUnimplementedTencentCloudServer()
}

// UnimplementedTencentCloudServer must be embedded to have forward compatible implementations.
type UnimplementedTencentCloudServer struct {
}

func (UnimplementedTencentCloudServer) CreateRecTask(context.Context, *TencentCloudCreateRecRequest) (*TencentCloudResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRecTask not implemented")
}
func (UnimplementedTencentCloudServer) mustEmbedUnimplementedTencentCloudServer() {}

// UnsafeTencentCloudServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TencentCloudServer will
// result in compilation errors.
type UnsafeTencentCloudServer interface {
	mustEmbedUnimplementedTencentCloudServer()
}

func RegisterTencentCloudServer(s grpc.ServiceRegistrar, srv TencentCloudServer) {
	s.RegisterService(&TencentCloud_ServiceDesc, srv)
}

func _TencentCloud_CreateRecTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TencentCloudCreateRecRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TencentCloudServer).CreateRecTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TencentCloud_CreateRecTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TencentCloudServer).CreateRecTask(ctx, req.(*TencentCloudCreateRecRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TencentCloud_ServiceDesc is the grpc.ServiceDesc for TencentCloud service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TencentCloud_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "TencentCloud",
	HandlerType: (*TencentCloudServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateRecTask",
			Handler:    _TencentCloud_CreateRecTask_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/tencent_cloud.proto",
}
