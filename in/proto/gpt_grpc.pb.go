// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.3
// source: proto/gpt.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	GPT_StreamChat_FullMethodName = "/GPT/StreamChat"
	GPT_Chat_FullMethodName       = "/GPT/Chat"
)

// GPTClient is the client API for GPT service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GPTClient interface {
	StreamChat(ctx context.Context, in *GPTRequest, opts ...grpc.CallOption) (GPT_StreamChatClient, error)
	Chat(ctx context.Context, in *GPTRequest, opts ...grpc.CallOption) (*GPTResponse, error)
}

type gPTClient struct {
	cc grpc.ClientConnInterface
}

func NewGPTClient(cc grpc.ClientConnInterface) GPTClient {
	return &gPTClient{cc}
}

func (c *gPTClient) StreamChat(ctx context.Context, in *GPTRequest, opts ...grpc.CallOption) (GPT_StreamChatClient, error) {
	stream, err := c.cc.NewStream(ctx, &GPT_ServiceDesc.Streams[0], GPT_StreamChat_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &gPTStreamChatClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GPT_StreamChatClient interface {
	Recv() (*GPTResponse, error)
	grpc.ClientStream
}

type gPTStreamChatClient struct {
	grpc.ClientStream
}

func (x *gPTStreamChatClient) Recv() (*GPTResponse, error) {
	m := new(GPTResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *gPTClient) Chat(ctx context.Context, in *GPTRequest, opts ...grpc.CallOption) (*GPTResponse, error) {
	out := new(GPTResponse)
	err := c.cc.Invoke(ctx, GPT_Chat_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GPTServer is the server API for GPT service.
// All implementations must embed UnimplementedGPTServer
// for forward compatibility
type GPTServer interface {
	StreamChat(*GPTRequest, GPT_StreamChatServer) error
	Chat(context.Context, *GPTRequest) (*GPTResponse, error)
	mustEmbedUnimplementedGPTServer()
}

// UnimplementedGPTServer must be embedded to have forward compatible implementations.
type UnimplementedGPTServer struct {
}

func (UnimplementedGPTServer) StreamChat(*GPTRequest, GPT_StreamChatServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamChat not implemented")
}
func (UnimplementedGPTServer) Chat(context.Context, *GPTRequest) (*GPTResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Chat not implemented")
}
func (UnimplementedGPTServer) mustEmbedUnimplementedGPTServer() {}

// UnsafeGPTServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GPTServer will
// result in compilation errors.
type UnsafeGPTServer interface {
	mustEmbedUnimplementedGPTServer()
}

func RegisterGPTServer(s grpc.ServiceRegistrar, srv GPTServer) {
	s.RegisterService(&GPT_ServiceDesc, srv)
}

func _GPT_StreamChat_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GPTRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GPTServer).StreamChat(m, &gPTStreamChatServer{stream})
}

type GPT_StreamChatServer interface {
	Send(*GPTResponse) error
	grpc.ServerStream
}

type gPTStreamChatServer struct {
	grpc.ServerStream
}

func (x *gPTStreamChatServer) Send(m *GPTResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _GPT_Chat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GPTRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GPTServer).Chat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GPT_Chat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GPTServer).Chat(ctx, req.(*GPTRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GPT_ServiceDesc is the grpc.ServiceDesc for GPT service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GPT_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "GPT",
	HandlerType: (*GPTServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Chat",
			Handler:    _GPT_Chat_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamChat",
			Handler:       _GPT_StreamChat_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/gpt.proto",
}
